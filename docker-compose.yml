version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: log_ingestor_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-logs}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-logs}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: log_ingestor_redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  ingestor:
    build:
      context: .
      dockerfile: Dockerfile.ingest
    container_name: log_ingestor_ingest
    ports:
      - "8080:8080" # Ingest API
      - "9091:9091" # Admin/Metrics API
    env_file:
      - .env
    volumes:
      - ./wal:/app/wal # Mount WAL directory for persistence and inspection
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  consumer:
    build:
      context: .
      dockerfile: Dockerfile.consumer
    container_name: log_ingestor_consumer
    deploy:
      replicas: 2 # Example of scaling consumers
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:
