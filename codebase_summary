{
  "cmd/consumer/main.go": "- File Path: `cmd/consumer/main.go`\n- High-Level Purpose: This file serves as the entry point for the log consumer worker service. It initializes core components like configuration and logging, and outlines the steps for starting the consumer logic.\n- Definitions in the File:\n  - Functions:\n    - `main()`: Public function.\n      - Description: The main function of the consumer worker. It loads application configuration, initializes a structured logger, and logs startup and shutdown messages. It includes TODOs for connecting to Redis and PostgreSQL, starting the consumer group processing loop, and handling graceful shutdown.\n- Notable Patterns or Logic:\n  - Application startup sequence: Loads configuration, initializes logger.\n  - Graceful shutdown placeholder.",
  "cmd/ingest/main.go": "- File Path: `cmd/ingest/main.go`\n- High-Level Purpose: This file serves as the entry point for the log ingest gateway service. It initializes core components like configuration and logging, and outlines the steps for starting the ingest server.\n- Definitions in the File:\n  - Functions:\n    - `main()`: Public function.\n      - Description: The main function of the ingest gateway. It loads application configuration, initializes a structured logger, and logs startup and shutdown messages. It includes TODOs for initializing repositories, use cases, setting up HTTP routing, starting the server, and handling graceful shutdown.\n- Notable Patterns or Logic:\n  - Application startup sequence: Loads configuration, initializes logger.\n  - Graceful shutdown placeholder.\n",
  "go.mod": "- File Path: `go.mod`\n- High-Level Purpose: This file defines the Go module for the `log-ingestor` project, specifying its module path, Go version, and direct external dependencies.\n- Definitions in the File:\n  - Variables / Constants:\n    - `module`: `github.com/user/log-ingestor` (module path).\n    - `go`: `1.21` (Go language version requirement).\n  - Dependencies:\n    - `github.com/caarlos0/env/v10 v10.0.0`: Required for parsing environment variables into structs.\n    - `github.com/joho/godotenv v1.5.1`: Required for loading `.env` files.\n- Notable Patterns or Logic:\n  - Standard Go module definition.\n",
  "internal/domain/log.go": "- File Path: `internal/domain/log.go`\n- High-Level Purpose: This file defines the canonical data structure for a log event within the system, including fields for event details and metadata.\n- Definitions in the File:\n  - Classes / Structs / Interfaces:\n    - `LogEvent` (struct): Represents a single log event.\n      - Fields:\n        - `ID` (string): Unique identifier for the event.\n        - `ReceivedAt` (time.Time): Timestamp when the event was received by the system.\n        - `EventTime` (time.Time): Original timestamp of the event.\n        - `Source` (string): Origin of the log event (optional).\n        - `Level` (string): Log level (e.g., \"info\", \"error\") (optional).\n        - `Message` (string): The primary log message.\n        - `Metadata` (json.RawMessage): Arbitrary JSON metadata associated with the event (optional).\n        - `RawEvent` (json.RawMessage): The original raw event payload, not intended for final serialization.\n        - `PIIRedacted` (bool): Indicates if Personally Identifiable Information has been redacted (optional).\n- Notable Patterns or Logic:\n  - Domain model definition.\n  - JSON struct tags for serialization/deserialization.\n",
  "internal/domain/repository.go": "- File Path: `internal/domain/repository.go`\n- High-Level Purpose: This file defines interfaces for various data repositories, abstracting away specific storage implementations for log buffering, API key validation, and write-ahead logging.\n- Definitions in the File:\n  - Classes / Structs / Interfaces:\n    - `LogRepository` (interface): Defines methods for buffering, reading, writing, and acknowledging log events.\n      - Methods:\n        - `BufferLog(ctx context.Context, event LogEvent) error`: Public method. Adds a single log event to a durable buffer.\n        - `ReadLogBatch(ctx context.Context, group, consumer string, count int) ([]LogEvent, error)`: Public method. Reads a batch of log events from the buffer for a specific consumer group.\n        - `WriteLogBatch(ctx context.Context, events []LogEvent) error`: Public method. Writes a batch of log events to the final structured sink.\n        - `AcknowledgeLogs(ctx context.Context, group string, eventIDs ...string) error`: Public method. Marks a set of log events as successfully processed in the buffer.\n    - `APIKeyRepository` (interface): Defines methods for validating API keys.\n      - Methods:\n        - `IsValid(ctx context.Context, key string) (bool, error)`: Public method. Checks if an API key is valid and active, with an expectation for caching.\n    - `WALRepository` (interface): Defines methods for interacting with a Write-Ahead Log (WAL) for failover.\n      - Methods:\n        - `Write(ctx context.Context, event LogEvent) error`: Public method. Appends a log event to the local WAL file.\n        - `Replay(ctx context.Context, handler func(event LogEvent) error) error`: Public method. Reads events from the WAL and processes them using a provided handler function.\n        - `Truncate(ctx context.Context) error`: Public method. Removes WAL segments that have been successfully replayed.\n- Notable Patterns or Logic:\n  - Repository pattern for data access abstraction.\n  - Interface-based design for loose coupling.\n",
  "internal/pkg/config/config.go": "- File Path: `internal/pkg/config/config.go`\n- High-Level Purpose: This file defines the application's configuration structure and provides a function to load these settings from environment variables, supporting `.env` files for local development.\n- Definitions in the File:\n  - Classes / Structs / Interfaces:\n    - `Config` (struct): Holds all application configuration parameters.\n      - Fields:\n        - `LogLevel` (string): The desired logging level (e.g., \"info\", \"debug\").\n        - `MaxEventSize` (int64): Maximum allowed size for a single log event in bytes.\n        - `WALSegmentSize` (int64): Size of individual WAL segments in bytes.\n        - `WALMaxDiskSize` (int64): Maximum total disk space for the WAL in bytes.\n        - `BackpressurePolicy` (string): Defines behavior when internal buffers are full (\"block\", \"429\", \"drop\").\n        - `RedisAddr` (string): Address for the Redis instance.\n        - `PostgresURL` (string): Connection URL for the PostgreSQL database.\n        - `APIKeyCacheTTL` (time.Duration): Time-to-live for API key cache entries.\n  - Functions:\n    - `Load() (*Config, error)`: Public function.\n      - Description: Loads configuration from environment variables into a `Config` struct. It also attempts to load a `.env` file for local development purposes.\n- Notable Patterns or Logic:\n  - Configuration management using environment variables.\n  - Use of `github.com/caarlos0/env` for structured environment variable parsing.\n  - Support for `.env` files via `github.com/joho/godotenv`.\n",
  "internal/pkg/logger/logger.go": "- File Path: `internal/pkg/logger/logger.go`\n- High-Level Purpose: This file provides a utility function to create and configure a structured logger using Go's `slog` package.\n- Definitions in the File:\n  - Functions:\n    - `New(level string) *slog.Logger`: Public function.\n      - Description: Creates and returns a new `slog.Logger` instance. It configures the logger to output JSON format to standard output and sets the logging level based on the provided string (e.g., \"debug\", \"info\", \"warn\", \"error\"). Defaults to \"info\" if an unknown level is provided.\n- Notable Patterns or Logic:\n  - Centralized logger initialization.\n  - Structured logging setup using `slog`.\n"
}