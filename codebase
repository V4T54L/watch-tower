{
  "cmd/consumer/main.go": "package main\n\nimport (\n\t\"log/slog\"\n\t\"os\"\n\n\t\"github.com/user/log-ingestor/internal/pkg/config\"\n\t\"github.com/user/log-ingestor/internal/pkg/logger\"\n)\n\nfunc main() {\n\tcfg, err := config.Load()\n\tif err != nil {\n\t\tslog.Error(\"failed to load configuration\", \"error\", err)\n\t\tos.Exit(1)\n\t}\n\n\tlog := logger.New(cfg.LogLevel)\n\tlog.Info(\"starting consumer worker...\")\n\n\t// TODO: Initialize and run consumer logic\n\t// - Connect to Redis\n\t// - Start consumer group processing loop\n\t// - Connect to PostgreSQL\n\t// - Setup signal handling for graceful shutdown\n\n\tlog.Info(\"consumer worker stopped\")\n}\n",
  "cmd/ingest/main.go": "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"log/slog\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"strings\"\n\t\"syscall\"\n\t\"time\"\n\n\t_ \"github.com/lib/pq\" // PostgreSQL driver\n\t\"github.com/redis/go-redis/v9\"\n\t\"github.com/user/log-ingestor/internal/adapter/api\"\n\tpii_adapter \"github.com/user/log-ingestor/internal/adapter/pii\"\n\tpostgres_repo \"github.com/user/log-ingestor/internal/adapter/repository/postgres\"\n\tredis_repo \"github.com/user/log-ingestor/internal/adapter/repository/redis\"\n\t\"github.com/user/log-ingestor/internal/pkg/config\"\n\t\"github.com/user/log-ingestor/internal/pkg/logger\"\n\t\"github.com/user/log-ingestor/internal/usecase\"\n)\n\nfunc main() {\n\t// 1. Load configuration\n\tcfg, err := config.Load()\n\tif err != nil {\n\t\t// Use slog here because the custom logger 'log' is not yet initialized.\n\t\tslog.Error(\"failed to load configuration\", \"error\", err)\n\t\tos.Exit(1)\n\t}\n\n\t// 2. Initialize logger\n\tlog := logger.New(cfg.LogLevel)\n\tlog.Info(\"starting ingest gateway\")\n\tdefer log.Info(\"ingest gateway shut down\")\n\n\t// 3. Initialize dependencies (DB, Redis, etc.)\n\t// PostgreSQL\n\tdb, err := sql.Open(\"postgres\", cfg.PostgresURL)\n\tif err != nil {\n\t\tlog.Error(\"failed to connect to postgres\", \"error\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer db.Close()\n\tif err := db.Ping(); err != nil {\n\t\tlog.Error(\"failed to ping postgres\", \"error\", err)\n\t\tos.Exit(1)\n\t}\n\n\t// Redis\n\tredisClient := redis.NewClient(\u0026redis.Options{\n\t\tAddr: cfg.RedisAddr,\n\t})\n\tif _, err := redisClient.Ping(context.Background()).Result(); err != nil {\n\t\tlog.Error(\"failed to connect to redis\", \"error\", err)\n\t\t// TODO: In a future step, this should trigger WAL mode instead of exiting.\n\t\tos.Exit(1)\n\t}\n\tdefer redisClient.Close()\n\n\t// 4. Initialize repositories\n\tapiKeyRepo := postgres_repo.NewAPIKeyRepository(db, log, cfg.APIKeyCacheTTL)\n\tlogRepo := redis_repo.NewLogRepository(redisClient, log)\n\t// TODO: Initialize WAL repository\n\n\t// 5. Initialize adapters\n\tpiiFields := strings.Split(cfg.PIIRedactionFields, \",\")\n\tpiiRedactor := pii_adapter.NewRedactor(piiFields, log)\n\n\t// 6. Initialize use cases\n\tingestUseCase := usecase.NewIngestLogUseCase(logRepo, piiRedactor, log)\n\n\t// 7. Setup HTTP router and server\n\trouter := api.NewRouter(cfg, log, apiKeyRepo, ingestUseCase)\n\tserver := \u0026http.Server{\n\t\tAddr:    cfg.IngestServerAddr,\n\t\tHandler: router,\n\t}\n\n\t// 8. Start server and handle graceful shutdown\n\tgo func() {\n\t\tlog.Info(\"server listening\", \"addr\", cfg.IngestServerAddr)\n\t\tif err := server.ListenAndServe(); err != nil \u0026\u0026 err != http.ErrServerClosed {\n\t\t\tlog.Error(\"server failed to start\", \"error\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t}()\n\n\tquit := make(chan os.Signal, 1)\n\tsignal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)\n\t\u003c-quit\n\tlog.Info(\"shutting down server...\")\n\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\n\tif err := server.Shutdown(ctx); err != nil {\n\t\tlog.Error(\"server shutdown failed\", \"error\", err)\n\t\tos.Exit(1)\n\t}\n}",
  "go.mod": "module github.com/user/log-ingestor\n\ngo 1.21\n\nrequire (\n\tgithub.com/caarlos0/env/v10 v10.0.0\n\tgithub.com/google/uuid v1.6.0\n\tgithub.com/joho/godotenv v1.5.1\n\tgithub.com/lib/pq v1.10.9\n\tgithub.com/redis/go-redis/v9 v9.5.1\n)\n\nrequire (\n\tgithub.com/cespare/xxhash/v2 v2.2.0 // indirect\n\tgithub.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f // indirect\n)\n",
  "internal/adapter/api/handler/ingest_handler.go": "package handler\n\nimport (\n\t\"bufio\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"io\"\n\t\"log/slog\"\n\t\"net/http\"\n\n\t\"github.com/user/log-ingestor/internal/domain\"\n\t\"github.com/user/log-ingestor/internal/usecase\"\n)\n\n// IngestHandler handles HTTP requests for log ingestion.\ntype IngestHandler struct {\n\tuseCase      *usecase.IngestLogUseCase\n\tlogger       *slog.Logger\n\tmaxEventSize int64\n}\n\n// NewIngestHandler creates a new IngestHandler.\nfunc NewIngestHandler(uc *usecase.IngestLogUseCase, logger *slog.Logger, maxEventSize int64) *IngestHandler {\n\treturn \u0026IngestHandler{\n\t\tuseCase:      uc,\n\t\tlogger:       logger,\n\t\tmaxEventSize: maxEventSize,\n\t}\n}\n\n// ServeHTTP processes incoming log ingestion requests.\nfunc (h *IngestHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tif r.Method != http.MethodPost {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t\treturn\n\t}\n\n\t// Enforce max body size\n\tr.Body = http.MaxBytesReader(w, r.Body, h.maxEventSize)\n\n\tcontentType := r.Header.Get(\"Content-Type\")\n\tvar err error\n\n\tswitch contentType {\n\tcase \"application/json\":\n\t\terr = h.handleSingleJSON(r.Context(), r.Body)\n\tcase \"application/x-ndjson\":\n\t\terr = h.handleNDJSON(r.Context(), r.Body)\n\tdefault:\n\t\thttp.Error(w, \"Unsupported Content-Type\", http.StatusUnsupportedMediaType)\n\t\treturn\n\t}\n\n\tif err != nil {\n\t\tvar maxBytesErr *http.MaxBytesError\n\t\tif errors.As(err, \u0026maxBytesErr) {\n\t\t\thttp.Error(w, \"Payload too large\", http.StatusRequestEntityTooLarge)\n\t\t\treturn\n\t\t}\n\t\th.logger.Error(\"failed to process ingest request\", \"error\", err)\n\t\thttp.Error(w, \"Bad request\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tw.WriteHeader(http.StatusAccepted)\n}\n\nfunc (h *IngestHandler) handleSingleJSON(ctx context.Context, body io.Reader) error {\n\tvar event domain.LogEvent\n\tdecoder := json.NewDecoder(body)\n\tdecoder.DisallowUnknownFields()\n\n\t// To capture the raw event, we need to read the body first\n\trawBody, err := io.ReadAll(body)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif err := json.Unmarshal(rawBody, \u0026event); err != nil {\n\t\treturn err\n\t}\n\n\tevent.RawEvent = rawBody // Store raw event before redaction\n\n\treturn h.useCase.Ingest(ctx, \u0026event)\n}\n\nfunc (h *IngestHandler) handleNDJSON(ctx context.Context, body io.Reader) error {\n\tscanner := bufio.NewScanner(body)\n\tfor scanner.Scan() {\n\t\tline := scanner.Bytes()\n\t\tif len(line) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tvar event domain.LogEvent\n\t\tif err := json.Unmarshal(line, \u0026event); err != nil {\n\t\t\t// Log the error but continue processing other lines\n\t\t\th.logger.Warn(\"failed to unmarshal ndjson line\", \"error\", err, \"line\", string(line))\n\t\t\tcontinue\n\t\t}\n\n\t\tevent.RawEvent = line // Store raw event before redaction\n\n\t\tif err := h.useCase.Ingest(ctx, \u0026event); err != nil {\n\t\t\t// If a single event fails to be ingested, we log it and continue.\n\t\t\t// A more robust strategy might involve a DLQ at this stage or returning a partial success.\n\t\t\th.logger.Error(\"failed to ingest event from ndjson stream\", \"error\", err, \"event_id\", event.ID)\n\t\t}\n\t}\n\n\treturn scanner.Err()\n}\n",
  "internal/adapter/api/middleware/auth.go": "package middleware\n\nimport (\n\t\"log/slog\"\n\t\"net/http\"\n\n\t\"github.com/user/log-ingestor/internal/domain\"\n)\n\nconst APIKeyHeader = \"X-API-Key\"\n\n// Auth is a middleware factory that returns a new authentication middleware.\n// It checks for a valid API key in the X-API-Key header.\nfunc Auth(repo domain.APIKeyRepository, logger *slog.Logger) func(http.Handler) http.Handler {\n\treturn func(next http.Handler) http.Handler {\n\t\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tapiKey := r.Header.Get(APIKeyHeader)\n\t\t\tif apiKey == \"\" {\n\t\t\t\tlogger.Warn(\"API key missing from request\", \"remote_addr\", r.RemoteAddr)\n\t\t\t\thttp.Error(w, \"Unauthorized: API key required\", http.StatusUnauthorized)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tisValid, err := repo.IsValid(r.Context(), apiKey)\n\t\t\tif err != nil {\n\t\t\t\tlogger.Error(\"failed to validate API key\", \"error\", err)\n\t\t\t\thttp.Error(w, \"Internal Server Error\", http.StatusInternalServerError)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif !isValid {\n\t\t\t\tlogger.Warn(\"invalid API key provided\", \"remote_addr\", r.RemoteAddr)\n\t\t\t\thttp.Error(w, \"Unauthorized: Invalid API key\", http.StatusUnauthorized)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tnext.ServeHTTP(w, r)\n\t\t})\n\t}\n}\n",
  "internal/adapter/api/router.go": "package api\n\nimport (\n\t\"log/slog\"\n\t\"net/http\"\n\n\t\"github.com/user/log-ingestor/internal/adapter/api/handler\"\n\t\"github.com/user/log-ingestor/internal/adapter/api/middleware\"\n\t\"github.com/user/log-ingestor/internal/domain\"\n\t\"github.com/user/log-ingestor/internal/pkg/config\"\n\t\"github.com/user/log-ingestor/internal/usecase\"\n)\n\n// NewRouter creates and configures the main HTTP router for the ingest service.\nfunc NewRouter(\n\tcfg *config.Config,\n\tlogger *slog.Logger,\n\tapiKeyRepo domain.APIKeyRepository,\n\tingestUseCase *usecase.IngestLogUseCase,\n) http.Handler {\n\tmux := http.NewServeMux()\n\n\t// Ingest Handler\n\tingestHandler := handler.NewIngestHandler(ingestUseCase, logger, cfg.MaxEventSize)\n\n\t// Middleware\n\tauthMiddleware := middleware.Auth(apiKeyRepo, logger)\n\n\t// Routes\n\tmux.Handle(\"POST /ingest\", authMiddleware(ingestHandler))\n\n\t// Health check\n\tmux.HandleFunc(\"/health\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.WriteHeader(http.StatusOK)\n\t\tw.Write([]byte(\"OK\"))\n\t})\n\n\t// TODO: Add /metrics and /events endpoints in future steps\n\n\treturn mux\n}\n",
  "internal/adapter/pii/redactor.go": "package pii\n\nimport (\n\t\"encoding/json\"\n\t\"log/slog\"\n\n\t\"github.com/user/log-ingestor/internal/domain\"\n)\n\nconst RedactedPlaceholder = \"[REDACTED]\"\n\n// Redactor is responsible for redacting sensitive information from log events.\ntype Redactor struct {\n\tfieldsToRedact map[string]struct{} // Use a map for O(1) lookups\n\tlogger         *slog.Logger\n}\n\n// NewRedactor creates a new Redactor instance with a given set of fields to redact.\nfunc NewRedactor(fields []string, logger *slog.Logger) *Redactor {\n\tfieldSet := make(map[string]struct{}, len(fields))\n\tfor _, field := range fields {\n\t\tfieldSet[field] = struct{}{}\n\t}\n\treturn \u0026Redactor{\n\t\tfieldsToRedact: fieldSet,\n\t\tlogger:         logger,\n\t}\n}\n\n// Redact modifies the LogEvent in place to remove PII from its metadata.\n// It returns an error if JSON processing fails.\nfunc (r *Redactor) Redact(event *domain.LogEvent) error {\n\tif len(r.fieldsToRedact) == 0 || len(event.Metadata) == 0 {\n\t\treturn nil\n\t}\n\n\tvar metadata map[string]interface{}\n\tif err := json.Unmarshal(event.Metadata, \u0026metadata); err != nil {\n\t\tr.logger.Warn(\"failed to unmarshal metadata for PII redaction\", \"error\", err, \"event_id\", event.ID)\n\t\t// We can't process it, so we leave it as is.\n\t\treturn err\n\t}\n\n\tredacted := false\n\tfor field := range r.fieldsToRedact {\n\t\tif _, ok := metadata[field]; ok {\n\t\t\tmetadata[field] = RedactedPlaceholder\n\t\t\tredacted = true\n\t\t}\n\t}\n\n\tif redacted {\n\t\tevent.PIIRedacted = true\n\t\tmodifiedMetadata, err := json.Marshal(metadata)\n\t\tif err != nil {\n\t\t\tr.logger.Error(\"failed to marshal modified metadata after PII redaction\", \"error\", err, \"event_id\", event.ID)\n\t\t\t// This is a more serious internal error.\n\t\t\treturn err\n\t\t}\n\t\tevent.Metadata = modifiedMetadata\n\t}\n\n\treturn nil\n}\n",
  "internal/adapter/repository/postgres/apikey_repository.go": "package postgres\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"log/slog\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype cacheEntry struct {\n\tisValid   bool\n\texpiresAt time.Time\n}\n\n// APIKeyRepository implements the domain.APIKeyRepository interface using PostgreSQL\n// as the source of truth and an in-memory, time-based cache.\ntype APIKeyRepository struct {\n\tdb       *sql.DB\n\tlogger   *slog.Logger\n\tcache    map[string]cacheEntry\n\tmu       sync.RWMutex\n\tcacheTTL time.Duration\n}\n\n// NewAPIKeyRepository creates a new instance of the PostgreSQL API key repository.\nfunc NewAPIKeyRepository(db *sql.DB, logger *slog.Logger, cacheTTL time.Duration) *APIKeyRepository {\n\treturn \u0026APIKeyRepository{\n\t\tdb:       db,\n\t\tlogger:   logger,\n\t\tcache:    make(map[string]cacheEntry),\n\t\tcacheTTL: cacheTTL,\n\t}\n}\n\n// IsValid checks if an API key is valid. It first checks a local cache and falls\n// back to the database if the key is not found or the cache entry has expired.\nfunc (r *APIKeyRepository) IsValid(ctx context.Context, key string) (bool, error) {\n\t// 1. Check cache with a read lock\n\tr.mu.RLock()\n\tentry, found := r.cache[key]\n\tif found \u0026\u0026 time.Now().Before(entry.expiresAt) {\n\t\tr.mu.RUnlock()\n\t\treturn entry.isValid, nil\n\t}\n\tr.mu.RUnlock()\n\n\t// 2. If not in cache or expired, query DB and update cache with a write lock\n\tr.mu.Lock()\n\tdefer r.mu.Unlock()\n\n\t// 2a. Double-check cache in case another goroutine populated it while waiting for the lock\n\tentry, found = r.cache[key]\n\tif found \u0026\u0026 time.Now().Before(entry.expiresAt) {\n\t\treturn entry.isValid, nil\n\t}\n\n\t// 3. Query the database\n\tvar isValid bool\n\t// A key is valid if it exists, is active, and has not expired.\n\tquery := `SELECT EXISTS(SELECT 1 FROM api_keys WHERE key = $1 AND is_active = true AND (expires_at IS NULL OR expires_at \u003e NOW()))`\n\terr := r.db.QueryRowContext(ctx, query, key).Scan(\u0026isValid)\n\tif err != nil {\n\t\tr.logger.Error(\"failed to validate API key in database\", \"error\", err)\n\t\t// Don't cache errors, let the next request retry from the DB\n\t\treturn false, err\n\t}\n\n\t// 4. Update cache\n\tr.cache[key] = cacheEntry{\n\t\tisValid:   isValid,\n\t\texpiresAt: time.Now().Add(r.cacheTTL),\n\t}\n\n\treturn isValid, nil\n}\n```",
  "internal/adapter/repository/redis/log_repository.go": "package redis\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"log/slog\"\n\n\t\"github.com/redis/go-redis/v9\"\n\t\"github.com/user/log-ingestor/internal/domain\"\n)\n\nconst (\n\tlogStreamKey = \"log_events\"\n)\n\n// LogRepository implements the buffering parts of the domain.LogRepository interface using Redis Streams.\ntype LogRepository struct {\n\tclient *redis.Client\n\tlogger *slog.Logger\n}\n\n// NewLogRepository creates a new Redis-backed LogRepository.\nfunc NewLogRepository(client *redis.Client, logger *slog.Logger) *LogRepository {\n\treturn \u0026LogRepository{\n\t\tclient: client,\n\t\tlogger: logger,\n\t}\n}\n\n// BufferLog adds a log event to the Redis Stream using XADD.\nfunc (r *LogRepository) BufferLog(ctx context.Context, event domain.LogEvent) error {\n\teventBytes, err := json.Marshal(event)\n\tif err != nil {\n\t\tr.logger.Error(\"failed to marshal log event for redis\", \"error\", err, \"event_id\", event.ID)\n\t\treturn err\n\t}\n\n\targs := \u0026redis.XAddArgs{\n\t\tStream: logStreamKey,\n\t\tValues: map[string]interface{}{\n\t\t\t\"event_id\": event.ID,\n\t\t\t\"payload\":  string(eventBytes),\n\t\t},\n\t}\n\n\t_, err = r.client.XAdd(ctx, args).Result()\n\tif err != nil {\n\t\tr.logger.Error(\"failed to add event to redis stream\", \"error\", err, \"event_id\", event.ID)\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\n// ReadLogBatch is a placeholder for the consumer implementation.\nfunc (r *LogRepository) ReadLogBatch(ctx context.Context, group, consumer string, count int) ([]domain.LogEvent, error) {\n\treturn nil, errors.New(\"not implemented\")\n}\n\n// WriteLogBatch is not implemented by the Redis repository; it's a sink responsibility.\nfunc (r *LogRepository) WriteLogBatch(ctx context.Context, events []domain.LogEvent) error {\n\treturn errors.New(\"not implemented: WriteLogBatch is a sink-specific method\")\n}\n\n// AcknowledgeLogs is a placeholder for the consumer implementation.\nfunc (r *LogRepository) AcknowledgeLogs(ctx context.Context, group string, eventIDs ...string) error {\n\treturn errors.New(\"not implemented\")\n}\n",
  "internal/domain/log.go": "package domain\n\nimport (\n\t\"encoding/json\"\n\t\"time\"\n)\n\n// LogEvent represents the canonical structure of a log event within the system.\ntype LogEvent struct {\n\tID          string          `json:\"event_id\"`\n\tReceivedAt  time.Time       `json:\"received_at\"`\n\tEventTime   time.Time       `json:\"event_time\"`\n\tSource      string          `json:\"source,omitempty\"`\n\tLevel       string          `json:\"level,omitempty\"`\n\tMessage     string          `json:\"message\"`\n\tMetadata    json.RawMessage `json:\"metadata,omitempty\"`\n\tRawEvent    json.RawMessage `json:\"-\"` // The original raw event, not marshalled to the final sink\n\tPIIRedacted bool            `json:\"pii_redacted,omitempty\"`\n}\n",
  "internal/domain/repository.go": "package domain\n\nimport \"context\"\n\n// LogRepository defines the interface for buffering and sinking log events.\n// This abstracts away the specific implementations (e.g., Redis Streams, PostgreSQL).\ntype LogRepository interface {\n\t// BufferLog adds a single log event to the durable buffer.\n\tBufferLog(ctx context.Context, event LogEvent) error\n\n\t// ReadLogBatch reads a batch of log events from the buffer for a specific consumer.\n\tReadLogBatch(ctx context.Context, group, consumer string, count int) ([]LogEvent, error)\n\n\t// WriteLogBatch writes a batch of log events to the final structured sink.\n\tWriteLogBatch(ctx context.Context, events []LogEvent) error\n\n\t// AcknowledgeLogs marks a set of log events as successfully processed in the buffer.\n\tAcknowledgeLogs(ctx context.Context, group string, eventIDs ...string) error\n}\n\n// APIKeyRepository defines the interface for validating API keys.\ntype APIKeyRepository interface {\n\t// IsValid checks if the provided API key is valid and active.\n\t// Implementations should handle caching to reduce database load.\n\tIsValid(ctx context.Context, key string) (bool, error)\n}\n\n// WALRepository defines the interface for the Write-Ahead Log failover mechanism.\ntype WALRepository interface {\n\t// Write appends a log event to the local WAL file.\n\tWrite(ctx context.Context, event LogEvent) error\n\n\t// Replay reads events from the WAL and sends them to a handler function.\n\t// The handler is responsible for re-buffering the event (e.g., to Redis).\n\tReplay(ctx context.Context, handler func(event LogEvent) error) error\n\n\t// Truncate removes WAL segments that have been successfully replayed.\n\tTruncate(ctx context.Context) error\n}\n",
  "internal/pkg/config/config.go": "package config\n\nimport (\n\t\"time\"\n\n\t\"github.com/caarlos0/env/v10\"\n\t\"github.com/joho/godotenv\"\n)\n\n// Config holds all application configuration.\ntype Config struct {\n\tLogLevel           string        `env:\"LOG_LEVEL\" envDefault:\"info\"`\n\tMaxEventSize       int64         `env:\"MAX_EVENT_SIZE_BYTES\" envDefault:\"1048576\"` // 1MB\n\tWALSegmentSize     int64         `env:\"WAL_SEGMENT_SIZE_BYTES\" envDefault:\"104857600\"` // 100MB\n\tWALMaxDiskSize     int64         `env:\"WAL_MAX_DISK_SIZE_BYTES\" envDefault:\"1073741824\"` // 1GB\n\tBackpressurePolicy string        `env:\"BACKPRESSURE_POLICY\" envDefault:\"block\"`\n\tRedisAddr          string        `env:\"REDIS_ADDR,required\"`\n\tPostgresURL        string        `env:\"POSTGRES_URL,required\"`\n\tAPIKeyCacheTTL     time.Duration `env:\"API_KEY_CACHE_TTL\" envDefault:\"5m\"`\n\tPIIRedactionFields string        `env:\"PII_REDACTION_FIELDS\" envDefault:\"email,password,credit_card,ssn\"`\n\tIngestServerAddr   string        `env:\"INGEST_SERVER_ADDR\" envDefault:\":8080\"`\n}\n\n// Load reads configuration from environment variables.\nfunc Load() (*Config, error) {\n\t// Attempt to load .env file for local development.\n\t_ = godotenv.Load()\n\n\tcfg := \u0026Config{}\n\tif err := env.Parse(cfg); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn cfg, nil\n}\n",
  "internal/pkg/logger/logger.go": "package logger\n\nimport (\n\t\"log/slog\"\n\t\"os\"\n\t\"strings\"\n)\n\n// New creates and configures a new slog.Logger.\nfunc New(level string) *slog.Logger {\n\tvar logLevel slog.Level\n\n\tswitch strings.ToLower(level) {\n\tcase \"debug\":\n\t\tlogLevel = slog.LevelDebug\n\tcase \"info\":\n\t\tlogLevel = slog.LevelInfo\n\tcase \"warn\", \"warning\":\n\t\tlogLevel = slog.LevelWarn\n\tcase \"error\":\n\t\tlogLevel = slog.LevelError\n\tdefault:\n\t\tlogLevel = slog.LevelInfo\n\t}\n\n\topts := \u0026slog.HandlerOptions{\n\t\tLevel: logLevel,\n\t}\n\n\thandler := slog.NewJSONHandler(os.Stdout, opts)\n\tlogger := slog.New(handler)\n\n\treturn logger\n}\n```",
  "internal/usecase/ingest_log.go": "package usecase\n\nimport (\n\t\"context\"\n\t\"log/slog\"\n\t\"time\"\n\n\t\"github.com/google/uuid\"\n\t\"github.com/user/log-ingestor/internal/adapter/pii\"\n\t\"github.com/user/log-ingestor/internal/domain\"\n)\n\n// IngestLogUseCase handles the business logic for ingesting a log event.\ntype IngestLogUseCase struct {\n\trepo     domain.LogRepository\n\tredactor *pii.Redactor\n\tlogger   *slog.Logger\n}\n\n// NewIngestLogUseCase creates a new IngestLogUseCase.\nfunc NewIngestLogUseCase(repo domain.LogRepository, redactor *pii.Redactor, logger *slog.Logger) *IngestLogUseCase {\n\treturn \u0026IngestLogUseCase{\n\t\trepo:     repo,\n\t\tredactor: redactor,\n\t\tlogger:   logger,\n\t}\n}\n\n// Ingest validates, enriches, redacts, and buffers a log event.\nfunc (uc *IngestLogUseCase) Ingest(ctx context.Context, event *domain.LogEvent) error {\n\t// 1. Enrich with server-side data\n\tevent.ReceivedAt = time.Now().UTC()\n\tif event.ID == \"\" {\n\t\tevent.ID = uuid.NewString()\n\t}\n\n\t// 2. Redact PII\n\tif err := uc.redactor.Redact(event); err != nil {\n\t\tuc.logger.Warn(\"failed to redact PII, proceeding with original event\", \"error\", err, \"event_id\", event.ID)\n\t\t// Non-fatal error, we still ingest the log\n\t}\n\n\t// 3. Buffer the log\n\tif err := uc.repo.BufferLog(ctx, *event); err != nil {\n\t\tuc.logger.Error(\"failed to buffer log event\", \"error\", err, \"event_id\", event.ID)\n\t\t// TODO: Implement WAL fallback logic here\n\t\treturn err\n\t}\n\n\treturn nil\n}\n"
}